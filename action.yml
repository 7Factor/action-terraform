name: Run Terraform

description: Runs various Terraform commands using the Terraform CLI.

inputs:
  github-token:
    description: The GitHub token to use
    default: ${{ github.token }}
    required: false
  tf-cli:
    description: The actual Terraform cli to use
    default: terraform
    required: false
  directory:
    description: The directory containing the Terraform configuration
    required: false
    default: .
  workspace:
    description: The Terraform workspace to use
    required: false
  workspace-select:
    description: |
      Whether to run terraform workspace select. Requires workspace input and the TF_WORKSPACE env var to not be set.
    required: false
    default: 'true'
  workspace-create-if-missing:
    description: Whether to create the workspace if it does not exist. Requires workspace-select input to be true.
    required: false
    default: 'true'
  init:
    description: Whether to run terraform init
    required: false
    default: 'true'
  init-args:
    description: Additional arguments to pass to terraform init
    required: false
  tfbackend-content:
    description: The content of the backend file to use.
    required: false
  fmt:
    description: Whether to run terraform fmt
    required: false
    default: 'true'
  validate:
    description: Whether to run terraform validate
    required: false
    default: 'true'
  action:
    description: The main terraform action to run ("plan", "apply", or "test")
    required: false
  action-args:
    description: Additional arguments to pass to terraform plan, apply, or test
    required: false
  destroy:
    description: Whether to destroy the infrastructure
    required: false
    default: 'false'
  output:
    description: Whether to run terraform output
    required: false
    default: 'false'
  output-args:
    description: Additional arguments to pass to terraform output
    required: false
    default: -json
  tfvars-content:
    description: The content of the variable file to use.
    required: false
  tfvars-json-content:
    description: The content of the variable file to use in JSON format.
    required: false
  plan-file-name:
    description: The name to the plan file to use. If not provided, a plan file will not be used.
    required: false
  encrypted-plan-password:
    description: The password to use to encrypt the plan artifact. If not provided, the plan will not be encrypted.
    required: false
  plan-retention-days:
    description: >
      Duration after which the plan artifact will expire in days.
      0 means using the default value defined in the repository settings.
      Actual values can range from 1 to 90 (public repositories) or 400 (private repositories).
    required: false
    default: '0'
  comment:
    description: Whether to comment on the PR with the results
    required: false
    default: 'true'
  comment-header:
    description: The header to use in the PR comment
    required: false
  comment-identifier:
    description: The identifier to use in the PR comment
    required: false

outputs:
  output:
    description: The output of the terraform output command
    value: ${{ steps.output.outputs.output }}

runs:
  using: composite
  steps:
    - name: Create tfbackend file
      if: inputs.tfbackend-content != ''
      shell: bash
      run: echo '${{ inputs.tfbackend-content }}' > ${{ github.action_path }}/action.tfbackend

    - name: Create tfvars variable files
      shell: bash
      run: |
        if [ -n "${{ inputs.tfvars-content }}" ]; then
          echo '${{ inputs.tfvars-content }}' > ${{ inputs.directory }}/action-variables.auto.tfvars
        fi
        if [ -n "${{ inputs.tfvars-json-content }}" ]; then
          echo '${{ inputs.tfvars-json-content }}' > ${{ inputs.directory }}/action-variables.auto.tfvars.json
        fi

    - name: ${{ inputs.tf-cli }} fmt
      id: fmt
      if: fromJSON(inputs.fmt)
      working-directory: ${{ inputs.directory }}
      shell: bash
      run: |
        ${{ inputs.tf-cli }} fmt -check -diff \
          ${{ github.event_name == 'pull_request' && '-no-color' || '' }}

    - name: ${{ inputs.tf-cli }} init
      id: init
      if: fromJSON(inputs.init)
      working-directory: ${{ inputs.directory }}
      shell: bash
      run: |
        ${{ inputs.tf-cli }} init -input=false \
          ${{ github.event_name == 'pull_request' && '-no-color' || '' }} \
          ${{ inputs.tfbackend-content != '' && format('-backend-config={0}/action.tfbackend', github.action_path) || '' }} \
          ${{ inputs.init-args }}

    - name: ${{ inputs.tf-cli }} workspace select
      id: workspace
      if: fromJSON(inputs.workspace-select) && inputs.workspace && !env.TF_WORKSPACE
      working-directory: ${{ inputs.directory }}
      shell: bash
      run: |
        ${{ inputs.tf-cli }} workspace select \
          ${{ fromJSON(inputs.workspace-create-if-missing) && '-or-create' || '' }} \
          ${{ inputs.workspace }} \
          ${{ github.event_name == 'pull_request' && '-no-color' || '' }}

    - name: ${{ inputs.tf-cli }} validate
      id: validate
      if: fromJSON(inputs.validate)
      working-directory: ${{ inputs.directory }}
      shell: bash
      run: |
        ${{ inputs.tf-cli }} validate \
          ${{ github.event_name == 'pull_request' && '-no-color' || '' }}

    - name: ${{ inputs.tf-cli }} test
      id: test
      if: inputs.action == 'test'
      working-directory: ${{ inputs.directory }}
      shell: bash
      run: |
        ${{ inputs.tf-cli }} test \
          ${{ github.event_name == 'pull_request' && '-no-color' || '' }} \
          ${{ inputs.action-args }}

    - name: ${{ inputs.tf-cli }} plan
      id: plan
      if: inputs.action == 'plan'
      working-directory: ${{ inputs.directory }}
      shell: bash
      run: |
        ${{ inputs.tf-cli }} plan -input=false \
          ${{ github.event_name == 'pull_request' && '-no-color' || '' }} \
          ${{ fromJSON(inputs.destroy) && '-destroy' || '' }} \
          ${{ inputs.plan-file-name && format('-out={0}', inputs.plan-file-name) || '' }} \
          ${{ inputs.action-args }}

    - name: Encrypt Plan
      if: inputs.action == 'plan' && inputs.plan-file-name && inputs.encrypted-plan-password
      shell: bash
      working-directory: ${{ inputs.directory }}
      run: |
        echo "Compressing and encrypting plan file"
        tar cf - ${{ inputs.plan-file-name }} \
          | 7z a -si -t7z -mx=3 -mhe=on -p"${{ inputs.encrypted-plan-password }}" artifact.tar.7z

    - name: Upload Plan
      if: inputs.action == 'plan' && inputs.plan-file-name
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.plan-file-name }}
        path: ${{ inputs.directory }}/${{ inputs.encrypted-plan-password && 'artifact.tar.7z' || inputs.plan-file-name }}
        if-no-files-found: error
        compression-level: ${{ inputs.encrypted-plan-password && '0' || '3' }}
        retention-days: ${{ inputs.plan-retention-days }}
        overwrite: true

    - name: Create Temporary Directory for Encrypted Plan
      if: inputs.action == 'apply' && inputs.plan-file-name && inputs.encrypted-plan-password
      shell: bash
      run: |
        echo "Creating temporary destination directory for encrypted plan"
        temp_dir=$(mktemp -d /tmp/XXXXXXXXX)
        echo "temp_dir=$temp_dir" >> "$GITHUB_ENV"

    - name: Download Plan
      if: inputs.action == 'apply' && inputs.plan-file-name
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.plan-file-name }}
        path: ${{ inputs.encryped-plan-password && env.temp_dir || inputs.directory }}

    - name: Decrypt Plan
      if: inputs.action == 'apply' && inputs.plan-file-name && inputs.encrypted-plan-password
      shell: bash
      run: |
        echo "Decrypting and extracting plan file"
        7z x -so "${{ env.temp_dir }}/artifact.tar.7z" -p"${{ inputs.encrypted-plan-password }}" \
          | tar xf - -C "${{ inputs.directory }}"

    - name: ${{ inputs.tf-cli }} apply
      id: apply
      if: inputs.action == 'apply' && github.event_name != 'pull_request'
      working-directory: ${{ inputs.directory }}
      shell: bash
      run: |
        ${{ inputs.tf-cli }} apply -input=false -auto-approve \
          ${{ github.event_name == 'pull_request' && '-no-color' || '' }} \
          ${{ fromJSON(inputs.destroy) && '-destroy' || '' }} \
          ${{ inputs.action-args }} \
          ${{ inputs.plan-file-name }}
        
    - name: Build PR Comment
      id: comment
      if: always() && fromJSON(inputs.comment) && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      env:
        # Capture the stdout/stderr in env vars to get them from process in the script to avoid unescaped quote issues
        header: ${{ inputs.comment-header }}
        fmtStdout: ${{ steps.fmt.outputs.stdout }}
        fmtStderr: ${{ steps.fmt.outputs.stderr }}
        initStdout: ${{ steps.init.outputs.stdout }}
        initStderr: ${{ steps.init.outputs.stderr }}
        workspaceStdout: ${{ steps.workspace.outputs.stdout }}
        workspaceStderr: ${{ steps.workspace.outputs.stderr }}
        validateStdout: ${{ steps.validate.outputs.stdout }}
        validateStderr: ${{ steps.validate.outputs.stderr }}
        testStdout: ${{ steps.test.outputs.stdout }}
        testStderr: ${{ steps.test.outputs.stderr }}
        planStdout: ${{ steps.plan.outputs.stdout }}
        planStderr: ${{ steps.plan.outputs.stderr }}
      with:
        github-token: ${{ inputs.github-token }}
        result-encoding: string
        script: |
          const content = {
            header: `${process.env.header}`,
            fmt: {
              enabled: ${{ inputs.fmt }},
              outcome: "${{ steps.fmt.outcome }}",
              stdout: `${process.env.fmtStdout}`,
              stderr: `${process.env.fmtStderr}`
            },
            init: {
              enabled: ${{ inputs.init }},
              outcome: "${{ steps.init.outcome }}",
              stdout: `${process.env.initStdout}`,
              stderr: `${process.env.initStderr}`
            },
            workspace: {
              enabled: ${{ fromJSON(inputs.workspace-select) && !!inputs.workspace && !env.TF_WORKSPACE }},
              outcome: "${{ steps.workspace.outcome }}",
              stdout: `${process.env.workspaceStdout}`,
              stderr: `${process.env.workspaceStderr}`
            },
            validate: {
              enabled: ${{ inputs.validate }},
              outcome: "${{ steps.validate.outcome }}",
              stdout: `${process.env.validateStdout}`,
              stderr: `${process.env.validateStderr}`
            },
            test: {
              enabled: ${{ inputs.action == 'test' }},
              outcome: "${{ steps.test.outcome }}",
              stdout: `${process.env.testStdout}`,
              stderr: `${process.env.testStderr}`
            },
            plan: {
              enabled: ${{ inputs.action == 'plan' }},
              outcome: "${{ steps.plan.outcome }}",
              stdout: `${process.env.planStdout}`,
              stderr: `${process.env.planStderr}`
            }
          }
          const terraformComment = require('${{ github.action_path }}/terraform_comment.js')
          return terraformComment(context, content)

    - name: PR Comment
      uses: 7Factor/action-pr-comment@v1
      if: always() && fromJSON(inputs.comment) && github.event_name == 'pull_request'
      with:
        github-token: ${{ inputs.github-token }}
        comment-identifier: ${{ inputs.comment-identifier }}
        comment-body: ${{ steps.comment.outputs.result }}

    - name: ${{ inputs.tf-cli }} output
      id: output
      if: fromJSON(inputs.output)
      working-directory: ${{ inputs.directory }}
      shell: bash
      run: |
        ${{ inputs.tf-cli }} output -no-color \
          ${{ inputs.output-args }} \
          > ${{ github.action_path }}/output
        set -e
        echo "output=$(cat ${{ github.action_path }}/output)" >> "$GITHUB_OUTPUT"
